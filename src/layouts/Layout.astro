---
import '../global.css';

import { ViewTransitions } from 'astro:transitions';

import { Sidebar } from '~/components/Sidebar';
import { SpHeader } from '~/components/SpHeader';

import * as styles from './Layout.css';
import { dark, light } from '~/theme.css';

interface Props {
  frontmatter?: {
    title: string;
    description: string;
  };

  title: string;
  description: string;
}

const { title, description } = Astro.props.frontmatter ?? Astro.props;
---

<!doctype html>
<html lang="ja">
  <head>
    <ViewTransitions />

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <meta name="og:title" content={title} />
    <meta name="description" content={description} />
    <meta name="og:description" content={description} />
    <meta name="og:locale" content="ja_JP" />
    <meta name="og:url" content="https://kodai.engineer" />
    <meta name="og:image" content="https://kodai.engineer/icon.jpg" />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:site" content="@0918nobita" />
    <meta name="twitter:creator" content="@0918nobita" />
    <title>{title}</title>
    <link rel="icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" href="/apple-touch-icon-180x180.png" />
  </head>
  <body>
    <script is:inline define:vars={{ dark, light }}>
      function osThemeSetting() {
        return window.matchMedia('(prefers-color-scheme: dark)').matches
          ? 'dark'
          : 'light';
      }

      /** @param {Document} doc */
      function applyTheme(doc) {
        const theme = (() => {
          if (typeof localStorage === undefined) return osThemeSetting();

          const storedTheme = localStorage.getItem('theme');

          switch (true) {
            case storedTheme === 'dark':
              return 'dark';
            case storedTheme === 'light':
              return 'light';
            case storedTheme !== null:
              localStorage.removeItem('theme');
            default:
              return osThemeSetting();
          }
        })();

        if (theme === 'dark') {
          doc.documentElement.classList.remove(light);
          doc.documentElement.classList.add(dark);
        } else {
          doc.documentElement.classList.remove(dark);
          doc.documentElement.classList.add(light);
        }
      }

      /**
       * @param {Document} doc
       * @param {'match-system' | 'dark' | 'light'} theme
       */
      function changeTheme(doc, theme) {
        if (typeof localStorage === undefined) return;

        switch (theme) {
          case 'dark':
            localStorage.setItem('theme', 'dark');
            break;

          case 'light':
            localStorage.setItem('theme', 'light');
            break;

          default:
            localStorage.removeItem('theme');
        }

        applyTheme(doc);
      }

      applyTheme(document);

      window.changeTheme = changeTheme;

      document.addEventListener('astro:before-swap', (ev) => {
        applyTheme(ev.newDocument);
      });
    </script>

    <main class:list={[styles.main]}>
      <Sidebar className={styles.sidebar} />

      <SpHeader className={styles.spHeader} />

      <div class:list={[styles.articleWrapper]}>
        <article class:list={[styles.article]}>
          <slot />
        </article>
      </div>
    </main>
  </body>
</html>
